## Proposal:  Develop a Short Guide to Concepts, Examples, Definitions Used by rlang

### Motivation:

I've tried a few times to work through metaprogramming in R and each time became discouraged when I reach a concept that does not appear difficult but example code in R leaves me puzzled.  

(Example:  Why isn't `x` a symbol. When does quote() return a string and when not?)

Others may not have this problem or simply accept it and move on.

### Objective:

Break down some of the ideas (ex:   data masking) into clearer definitions.   Separate the *idea* from *R code*.   Use terminology with examples (and counter-examples) that illustrate an idea. The guide will be a list of terms, definitions , example code and then links.

Example:  Code block in this [Wikipedia article](https://en.wikipedia.org/wiki/String_interpolation), beginning with 'apples=4', shows what **string interpolation** is and what is **not string interpolation.**  

Before introducing the **rlang** solution, show why base R is not sufficient.
Add simple graphs to illustrate ideas.

Not write a book or reinvent anything.  Link to R manuals, rlang documentation, stackoverflow, articles written by others.  However, this guide should have very simple code to clarify the idea or problem.


### Ideas from Lisp?

I do not know Lisp, but it appears R implements a number of ideas from Lisp.  Sometimes I benefit from reading wikipedia and then try to figure out the what the R code is doing under the hood.


### What's the catch?

Doubt I will finish it.  Because I'll get stuck and refuse to move on. (not the
best career trait)   If there is another person in our group able and willing to
puzzle out some of these things, it could work out nicely.  In any event, I am
sure that even a list of terms, with few introductory links,  will give the next
group something to pick up.



    

    

