[
  {
    "objectID": "01030_poisson_distribution.html",
    "href": "01030_poisson_distribution.html",
    "title": "quarto-experiments",
    "section": "",
    "text": "Note\n\n\n\nNote that there are five types of callouts, including: note, warning, important, tip, and caution."
  },
  {
    "objectID": "01030_poisson_distribution.html#poisson-distribution",
    "href": "01030_poisson_distribution.html#poisson-distribution",
    "title": "quarto-experiments",
    "section": "Poisson Distribution",
    "text": "Poisson Distribution\n\nSEE Taylor, binomial to Poisson\nBMLS\nPSU 414\nwikipedia\nhttp://www.econometricsbysimulation.com/search?q=poisson\n\nLet \\(\\chi\\) be rv, counting of events , 0, 1, 2 … per interval. \\(\\chi\\) might be\n\ncounts per unit time, distance.\ntypos per page.\ncars passing per unit time.\nATM customers per hour."
  },
  {
    "objectID": "01030_poisson_distribution.html#motivating-poisson",
    "href": "01030_poisson_distribution.html#motivating-poisson",
    "title": "quarto-experiments",
    "section": "Motivating Poisson:",
    "text": "Motivating Poisson:\nSuppose, on average, receive 9 letters in mail each day. And suppose can model post office as poisson. This addresses question: how many letters will I received today? Then expect sd to be sqrt(9) and so expect actual number of letters to vary between 3 and 12 (2 sd).\n\\[\\begin{align*}\nPr(X = x) = {e^{-\\lambda}\\lambda^x}/{x!}\n\\end{align*}\\]\n\nlambda = 9    # rate of 1 per unit\nx  &lt;- 0:20    # how many counts?\nz  &lt;- dpois(x = x, lambda = lambda)\nw  &lt;- dpois(x = x, lambda = 1)\nplot(z, main =\"Poisson Distribution: upto n=20 counts, compare lambda= c(1,9)\",\n     ylab = \"dpois\",\n     xlab = \"counts, 1:n\",\n     pch = 19,\n     col = \"plum\" \n)\npoints(w, pch = 20, col=\"red\")   # colors()\n\n\n\n\n# plot(w, main =\"Poisson Distribution: upto n=20 counts, lambda=1\",\n#      ylab = \"dpois\",\n#      xlab = \"counts, 1:n\",\n#      pch = 19,\n#      col = 3,\n#      col.axis = \"5\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quarto-experiments",
    "section": "",
    "text": "Top of Page\n\n\nR code\n\n1 + 1\n..........&gt; [1] 2\n\n\n  \n    \n\n    \n  \n    \n     twitter\n  \n  \n    \n     Github\n  \n\n  \n  \npartial page content\n\nindex.qmd\nabout: triggers layout\n‘landing page’\njolla theme (colors)\n\n\n\n\n\nIs this blue?"
  },
  {
    "objectID": "010_mtcars_basic.html",
    "href": "010_mtcars_basic.html",
    "title": "mtcars_basic",
    "section": "",
    "text": "A frequent problem occurs when trying to access columns inside a data.frame.\n\nhead(mtcars)\n..........&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n..........&gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n..........&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n..........&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n..........&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n..........&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n..........&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\nmtcars[1:5, c(\"hp\")]\n..........&gt; [1] 110 110  93 110 175\n\nBut using just col name fails.\n\nmtcars[1:5, hp]\n..........&gt; Error in eval(expr, envir, enclos): object 'hp' not found\n\nThe reason as explained in many places, such as dplyr ….., is mtcars exisits in the environment, but not hp.\n\nhp\n..........&gt; Error in eval(expr, envir, enclos): object 'hp' not found\n\nAgain this is explained in many places, along with several ways to fix, for example.\n\nwith(mtcars, hp)\n..........&gt;  [1] 110 110  93 110 175 105 245  62  95 123 123 180 180 180 205 215 230  66  52\n..........&gt; [20]  65  97 150 150 245 175  66  91 113 264 175 335 109\n\nOf course, R’s help also explains this but you must be comfortable with terms like environment , expression and parent and what constructing an environment with data means.\n\n?with\n\nHere is my own take. It is same as above, but I find this way clearer.\nLet’s check what is current globalenv() the the environment. Then packages attached to search path.\n\nls()\n..........&gt; [1] \"has_annotations\"\nsearch()\n..........&gt; [1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n..........&gt; [4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n..........&gt; [7] \"package:methods\"   \"Autoloads\"         \"package:base\"\n\nFor our purposes, note there is no hp\n\nls(base)\n..........&gt; Warning in ls(base): 'base' converted to character string\n..........&gt; Error in as.environment(pos): no item called \"base\" on the search list\nls(\"package:base\") |&gt; grep(pattern=c(\"mtcars\"))\n..........&gt; integer(0)\n\nAttach mtcars to search path\n\nattach(mtcars)\nsearch()\n..........&gt;  [1] \".GlobalEnv\"        \"mtcars\"            \"package:stats\"    \n..........&gt;  [4] \"package:graphics\"  \"package:grDevices\" \"package:utils\"    \n..........&gt;  [7] \"package:datasets\"  \"package:methods\"   \"Autoloads\"        \n..........&gt; [10] \"package:base\"\n\nNow, can find hp\n\nhp\n..........&gt;  [1] 110 110  93 110 175 105 245  62  95 123 123 180 180 180 205 215 230  66  52\n..........&gt; [20]  65  97 150 150 245 175  66  91 113 264 175 335 109\n\nWhy? col names are in environment one level up from globalenv()\n\nls(parent.env(globalenv()))\n..........&gt;  [1] \"am\"   \"carb\" \"cyl\"  \"disp\" \"drat\" \"gear\" \"hp\"   \"mpg\"  \"qsec\" \"vs\"  \n..........&gt; [11] \"wt\"\n\nThis will add mtcars into globalenv(), but not change search()\n\n# This puts data in globalenv()\ndata(mtcars)\nls()\n..........&gt; [1] \"has_annotations\" \"mtcars\"\nsearch()\n..........&gt;  [1] \".GlobalEnv\"        \"mtcars\"            \"package:stats\"    \n..........&gt;  [4] \"package:graphics\"  \"package:grDevices\" \"package:utils\"    \n..........&gt;  [7] \"package:datasets\"  \"package:methods\"   \"Autoloads\"        \n..........&gt; [10] \"package:base\"\n\nRemove mtcars\n\nrm(mtcars)\nls()\n..........&gt; [1] \"has_annotations\"\nmtcars[1:5, ]\n..........&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n..........&gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n..........&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n..........&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n..........&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n..........&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nls()\n..........&gt; [1] \"has_annotations\""
  },
  {
    "objectID": "300_tech_resume.html",
    "href": "300_tech_resume.html",
    "title": "jim Rothstein",
    "section": "",
    "text": "jimrothstein@gmail.com\n(831) 824-4304\nGithub: https://github.com/jimrothstein\n\n\n\n\n\nR, packages, httr2, tidyverse, data.table, etc\nAPI\nGit/Github\nLatex, knitr, pandoc, quarto\nRstudio/Neovim\nLua\nLinux\n\n\n\n\n\nContribute R Github projects\nhttps://github.com/jimrothstein\nhttps://jimrothstein.github.io/\nVariety database, programming projects\n\n\n\n\nBS MIT, physics\n\n\n\nJim Rothstein – jimrothstein@gmail.com – (831) 824-4304"
  },
  {
    "objectID": "300_tech_resume.html#r-coderdata-analysis",
    "href": "300_tech_resume.html#r-coderdata-analysis",
    "title": "jim Rothstein",
    "section": "",
    "text": "jimrothstein@gmail.com\n(831) 824-4304\nGithub: https://github.com/jimrothstein\n\n\n\n\n\nR, packages, httr2, tidyverse, data.table, etc\nAPI\nGit/Github\nLatex, knitr, pandoc, quarto\nRstudio/Neovim\nLua\nLinux\n\n\n\n\n\nContribute R Github projects\nhttps://github.com/jimrothstein\nhttps://jimrothstein.github.io/\nVariety database, programming projects\n\n\n\n\nBS MIT, physics\n\n\n\nJim Rothstein – jimrothstein@gmail.com – (831) 824-4304"
  },
  {
    "objectID": "tryCatch.html",
    "href": "tryCatch.html",
    "title": "try-catch",
    "section": "",
    "text": "I seem to forget exact punctuation in R and need a few tries to get it right. TryCatch is one example!\nThe trick is use formatting so things wrong will stick out. Rahul !so 12193779 has excellent example: Note the use of curly braces {} as well as parenthesis () https://stackoverflow.com/q/12193779/5057251 https://stackoverflow.com/a/53876586/5057251\n\n\nCode\nlog_calculator &lt;- function(x){\n    tryCatch(\n        expr = {\n            message(log(x))\n            message(\"Successfully executed the log(x) call.\")\n        },\n        error = function(e){\n            message('Caught an error!')\n            print(e)\n        },\n        warning = function(w){\n            message('Caught an warning!')\n            print(w)\n        },\n        finally = {\n            message('All done, quitting.')\n        }\n    )    \n}\n\nlog_calculator(10)\nlog_calculator(\"10\")\n..........&gt; &lt;simpleError in log(x): non-numeric argument to mathematical function&gt;"
  },
  {
    "objectID": "not_zero.html",
    "href": "not_zero.html",
    "title": "not-zero",
    "section": "",
    "text": "I knew that 0 becomes FALSE, when logical is required.\n\n\nCode\nif(0) print(\"FALSE\")\n\n\nAnd I knew that 1 becomes TRUE\n\n\nCode\nif(1) print(\"TRUE\")\n..........&gt; [1] \"TRUE\"\n\n\nBut I did not know:\n\n\nCode\nif(!0) print(\"TRUE\")\n..........&gt; [1] \"TRUE\""
  },
  {
    "objectID": "310_R_notes.html",
    "href": "310_R_notes.html",
    "title": "R Notes",
    "section": "",
    "text": "Note\n\n\n\nAll R, math, statistics notes here.\n–&gt; ### Environemnts, Namespacds - conflicted package."
  },
  {
    "objectID": "310_R_notes.html#nse-non-standard-evaluation",
    "href": "310_R_notes.html#nse-non-standard-evaluation",
    "title": "R Notes",
    "section": "1 NSE, Non-Standard Evaluation",
    "text": "1 NSE, Non-Standard Evaluation\nTreat code as data: ability to manipulate code before evaluated.\noperator (non-R) An operate takes a function f and returns new function g. Example: f'(x) = g(x)\n\n# test  is this grey?\n\npackage:\nPairlist\nParent Frame of function If function g() is called inside body of function f, the g has the parent frame (aka calling environment) that is execution environment of f. DRAW Diagram\nParse Convert a string (character vector) into an R Expression (ie code), which is NOT a string. Motivation is to setup R object for manipulation before evaluation. Parse(*.R) removes comments. Note: after parsing, the result is NOT character(1), a string.\nDeparse converts an R Expression to a string (character vector) .\nParse & Deparse are NOT? opposites. See Murdoch\n(latex) parse: string ==&gt; R expression (error if invalid) deparse: R expression ==&gt; string (actually: structure(expression(), scrfile)\noptions Temporary vs global vs local. Read R manual.(TODO)\n\nif, +, sin, sqrt\nC functions\nSEE ADV-R Chapter 6, code: 059 (myoldcode)\nSEE https://nsaunders.wordpress.com/2018/06/22/idle-thoughts-lead-to-r-internals-how-to-count-function-arguments/\nSEE R Internals/Ch 2\nDo not understand at deeper level\n\n\n#   TODO\n#   R complains about putting function in data.frame\n\n### check several functions\ny  &lt;- list(sin, \"sin\", c, switch, typeof, sqrt, `if`, `+`)\n\nquote(sin)\nquote(\"sin\")\nquote(c)\nquote(sqrt)\nquote(`if`)\nquote(`+`)\ndeparse(y)\ndata.frame(object = y,\n           typeof = sapply(y, typeof),\n           is.primitive = sapply(y, is.primitive),\n           is.function = sapply(y, is.function))\n\nR R has two parents: S, based on C, Fortran for statistics. R also has functional component, based on Scheme.\nIt is possible to abuse R, using it more like S code. (?)\n\n**Reification** Abstract idea to treat all code as \"data\", including functions, structures, etc. This means all such objects can be modified by code. C has. (TODO)\n\n::: {.content-visible when-format=\"html\"}\n##  Referencial Transparency\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\n\\section{Referencial Transparency}\n:::\n\nA function f is \\textbf{referencial  transparent} IF replacing x with its value\nreturns same.\n\n::: {.cell hash='310_R_notes_cache/html/unnamed-chunk-4_4d55d9689ff3045a551a2d40c61f1d6f'}\n\n```{.r .cell-code}\nf = function(x) x\nx = 6\nidentical(f(x), f(6))\n..........&gt; [1] TRUE\n:::\nHowever, not all R functions have this property.\n\nx=6\nidentical(quote(x), quote(6))\n..........&gt; [1] FALSE\n\nReferencial Semantics Changes to values are done in memory. There is no copy.\nSubstitute When used in function with formal variable, substitute stops evaluation, captures the user’s code and returns a call (ie unevaluated )\nsyntax How code looks, is { in right place, a grammar.\nSyntax Sugar Syntax to make easier for human to express or write code efficiently.\nVectorize No loops, no for, no lapply. Example:\na &lt;- 1:10^4\nx &lt;- a[a %% 2 == 0]         # select elments of a vector\nExample:   array[i]  vs. get_array(array, i)\nExample:   `+` (1,2) vs.  1 + 2\nsemantics What does the code DO?\nString String (“5+5”) is NOT call. No such thing as evaluating a string. See 0210_ You can PARSE a string and then manipulate it. Simpler to eval a quote(5+5) to return the sum.\n\n1.1 String Interpolation\nMethod to substitute the value of expr into a string. Can think of it as template with holes. SEE: https://www.r-bloggers.com/2018/03/math-notation-for-r-plot-titles-expression-and-bquote/\nbquote examples SEE 410\n\nx = 5 \nbquote(x == .(x))\n..........&gt; x == 5\n\n\n\n1.2 Symbol\n3.1.2 Symbol lookup | In this small example y is a symbol and its value is 4. A symbol is an R object too,\n\ny = 4\ny\n..........&gt; [1] 4\nis.symbol(y)\n..........&gt; [1] FALSE\nis.name(y)\n..........&gt; [1] FALSE\nis.object(y)\n..........&gt; [1] FALSE\n\n# but\ny = as.symbol(y)\nis.symbol(y)\n..........&gt; [1] TRUE\ny\n..........&gt; `4`\n\nSee R Lang Ref: 2.1.3.1 Symbol (aka name), usually name of R object. Use `as.name() to coerce to symbol or quote() or atoms of parse()\n\n\nIn order to manipulate symbols we need a new element in our language: the\nability to quote a data object. Suppose we want to construct the list (a\nb). We can’t accomplish this with (list a b), because this expression\nconstructs a list of the values of a and b rather than the symbols\nthemselves. This issue is well known in the context of natural languages,\nwhere words and sentences may be regarded either as semantic entities or as\ncharacter strings (syntactic entities). The common practice in natural\nlanguages is to use quotation marks to indicate that a word or a sentence\nis to be treated literally as a string of characters. For instance, the\nfirst letter of “John” is clearly “J.” If we tell somebody “say your name\naloud,” we expect to hear that person’s name. However, if we tell somebody\n“say ‘your name’ aloud,” we expect to hear the words “your name.” Note that\nwe are forced to nest quotation marks to describe what somebody else might\nsay. We can follow this same practice to identify lists and symbols that\nare to be treated as data objects rather than as expressions to be\nevaluated. However, our format for quoting differs from that of natural\nlanguages in that we place a quotation mark (traditionally, the single\nquote symbol ’) only at the beginning of the object to be quoted. We can\nget away with this in Scheme syntax because we rely on blanks and\nparentheses to delimit objects. Thus, the meaning of the single quote\ncharacter is to quote the next object. Now we can distinguish between\nsymbols and their values:\n\nhttps://stackoverflow.com/questions/8846628/what-exactly-is-a-symbol-in-lisp-scheme"
  },
  {
    "objectID": "310_R_notes.html#tidy-evaluation",
    "href": "310_R_notes.html#tidy-evaluation",
    "title": "R Notes",
    "section": "2 Tidy Evaluation",
    "text": "2 Tidy Evaluation\n\npronouns, to distinguish between objects in environment ls() .envcyl and  not associated with the df and data columns in df .datacyl (df)\n\nVariable Three kinds:\n* formals,x f = function(x= … )\n* local,a f = function() {a =10}\n* free, unbound, global, z f = function() (print(z))\n\n\n2.0.1 function\n\nf  &lt;- function(x=NULL) {\n    x^2\n}\n\nformals(f)      ## pairlist\n..........&gt; $x\n..........&gt; NULL\nbody(f)         ## language, $\\code{call}$\n..........&gt; {\n..........&gt;     x^2\n..........&gt; }\nenvironment(f)  ## environment\n..........&gt; &lt;environment: R_GlobalEnv&gt;\n\nargs(f)         ## closure\n..........&gt; function (x = NULL) \n..........&gt; NULL\n\n\n## returns expression\nparse(text= '2^2')\n..........&gt; expression(2^2)\n\n## fails, does not know a is.\n# parse(text= '2a')\n\n\n\n2.0.2 call\n\nf  &lt;- function(x=NULL) {\n}\n\ncl  &lt;- call(\"f\", list(x=2))\ncl\n..........&gt; f(list(x = 2))\nis.function(cl)\n..........&gt; [1] FALSE\nis.call(cl)\n..........&gt; [1] TRUE\n\n\n##  Args must be evaluated, even if f is unevaluted \n    x  &lt;- 2\n    call(\"f\", list(x))\n..........&gt; f(list(2))\n    #call(\"f\", list(x=a))   # throws error\n\n\nres  &lt;- substitute(x+a) \nres\n..........&gt; x + a\nis.call(res)\n..........&gt; [1] TRUE\n\n::: #### K-nearest neighbors, K is given\n\\forall x \\in X , which could be any dimension , is already assigned to a region. For a new point, examine its K nearest neighbors who decide by majority vote which region x belongs to. SEE: wine example SEE: Gaglow book.\n\n\n2.0.3 Bias-Var Tradeoff.\nWith non-zero noise, of variance \\sigma^{2} the best approximate to f(x) will always have non-zero error: Isn’t there a relation betwee E, VAR? like x and p ?\n\nError = E(f_hat) + Var(f_hat) + \\sigma^{2}\nError \\gteqq 0\n SEE Berkeley Crash Course; Matloff"
  },
  {
    "objectID": "310_R_notes.html#questions",
    "href": "310_R_notes.html#questions",
    "title": "R Notes",
    "section": "3 Questions",
    "text": "3 Questions\n\n#   Explain how Base R finds column name\nlibrary(dplyr)\ndata(starwars)\ncol = \"hair_color\"\nsum(is.na(starwars[, eval(col) ]) )\n..........&gt; [1] 5\nsum(is.na(starwars[, col ]) )\n..........&gt; [1] 5"
  },
  {
    "objectID": "001_tech_reading.html",
    "href": "001_tech_reading.html",
    "title": "using .qmd",
    "section": "",
    "text": "As of \nUse \\href{url}{text}\n\nBookClub\n\nJanssens, DS at Command Line: https://www.datascienceatthecommandline.com/2e/\nHadley, https://mastering-shiny.org/\nR, javascript + shiny https://book.javascript-for-r.com/\nHTTP Testing (book) https://books.ropensci.org/http-testing/\n\n\n\nR - always learn something new:\n\nBurns, R Inferno (not intro book)\nPeng, https://bookdown.org/rdpeng/rprogdatascience/ * Peng, https://bookdown.org/rdpeng/RProgDA/\nHadley, https://r4ds.had.co.nz/index.html\nJennybc (book) wtf git\nGillespie, Lovelace (2016) https://bookdown.org/csgillespie/efficientR/\nMatloff: Art of R Programming (2011)\nde Jong, Intro to Data Cleaning https://cran.r-project.org/doc/contrib/de_Jonge+van_der_Loo-Introduction_to_data_cleaning_with_R.pdf\nGrolemund, 2014 https://rstudio-education.github.io/hopr/\n\n\n\nR - Documentation (can beat searching !)\n\nJust Read the docs! https://rdrr.io/r/\n\nofficial R CRAN: https://cran.r-project.org/manuals.html\n\nR intro: https://cran.r-project.org/doc/manuals/r-release/R-intro.html\nR Lang: https://cran.r-project.org/doc/manuals/r-release/R-lang.html\n\ndesign.tidyverse.org\nJust Read the docs! https://rdrr.io/r/\n\n\n\nR - graphics (base:: is main package)\n\n  https://rdrr.io/r/graphics/par.html\n  R intro         -   Ch 12:  https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Graphics  \n  R internals - Ch 6 graphics (lower level)\n  base Idiot's guide  https://rstudio-pubs-static.s3.amazonaws.com/7953_4e3efd5b9415444ca065b1167862c349.html\n\n\n\nBasic Statistics\n\nMore Intuitive/Explanatory:\n\n[Rossman, know all the basics? confident?] ( https://askgoodquestions.blog/ )\nPrzemyslaw Biecek and Tomasz Burzykowski | different ideas | Ch1, 2 Explanatory Model Analysis | https://ema.drwhy.ai/\nML Berkeley: https://ml.berkeley.edu/blog/posts/crash-course/part-1/\nGoodfellow et al: https://www.deeplearningbook.org/ ideas\nGuo: Creative site and book: https://seeing-theory.brown.edu/#firstPage\nnavarro (learn statistics with r) review lm() and geometric r^2, Ch15, 16\nnavarro 2019 (learn statistics with r) study output of lm() * Huntington https://www.theeffectbook.net/index.html (intutition?)\n\n\n\nSolid, basic stats intros\n\nPSU Course begin with 414 | | no R * https://online.stat.psu.edu/stat414/ * https://online.stat.psu.edu/stat462/ * https://online.stat.psu.edu/stat415/\nAMS Basic, good intro CLT (but not t)\nDekking, et al Modern Introduction to Probability & Statistics (2005), no R. https://cis.temple.edu/~latecki/Courses/CIS2033-Spring13/Modern_intro_probability_statistics_Dekking05.pdf\nFaraday, PRAR: Practical Regression, Anova, linear algebra (mature approach)\nFrey, Bruce “Statistical Hacks”\n[Dalpiaz, David, Univ of IL] ( https://daviddalpiaz.github.io/appliedstats/ )\nLindelov: Concise R examples of common stat tests. * Lavine, Statistical Thought: https://people.math.umass.edu/~lavine/Book/book.pdf\nMatloff (Prob book) * http://heather.cs.ucdavis.edu/~matloff/132/PLN/probstatbook/ProbStatBook.pdf * (via pdflatex) https://github.com/matloff/probstatbook Good, maybe too good and skips a few basics?\nSiegrist CLT, stats, linear alg | aka randomservices.org | ** best book for introducing Math\n\nNahim, Dueling Idiots, harder but real world stats/prob problems (pins falling on surfaces)\n\n\n\nR and Special Topics\n-   Data Science at Command Line (book) https://datascienceatthecommandline.com/2e/chapter-2-getting-started.html\n    -   videos: https://www.youtube.com/c/R4DSOnlineLearningCommunity  \n\n\nBlogs\n\nhttps://towardsdatascience.com\nR-Blogger - {rweekly.org} - https://www.rstudio.com/blog/software-development-resources-for-data-scientists/ - \n\n\n\nR, the Language: Functional, Standard and Non- Evaluation, Environments, Call Stacks:\n\nChambers (2008) “Statistics & Computing” (much coverage of R internals) \nGaslam, Brodie - blog - several good posts * NSE: https://www.brodieg.com/2020/05/05/on-nse/ * HP Calculator & Reverse Polish! https://www.brodieg.com/2019/01/11/reverse-polish-notation-parsing-in-r/ * Side Effects, Macros: https://www.brodieg.com/2019/10/30/visualizing-algorithms/\nGupta, Suraj - How R Finds objects: https://blog.obeautifulcode.com/R/How-R-Searches-And-Finds-Stuff/\nRnews - Lumley, Macros in R: https://www.r-project.org/doc/Rnews/Rnews_2001-3.pdf\nRnews - 2001-2008 has lot of good articles\nrlist use functional ideas with lists: https://renkun-ken.github.io/rlist/\ntutorial for rlist: https://renkun-ken.github.io/rlist-tutorial/\nGatto: https://github.com/lgatto/TeachingMaterial/blob/master/_R-functional-programming/functional-programming.pdf\n\n\n\nHaskell\n\nfairly gentle Haskell intro: https://www.cantab.net/users/antoni.diller/haskell/units/unit02.html\nHaskell book: http://book.realworldhaskell.org/read/\n\n\n\n\nOther book stats/R books:\n\nHannay (=rbassett) read, (avoid pkgs ch 11, 12) | https://faculty.nps.edu/rbassett/_book/\nIsmay modern dive (2020)\nKaplan (2017) ch 6.5 https://dtkaplan.github.io/SM2-bookdown/ (wordy, but exposes nuances)\nLane se(b_hat)\nMatloff(2020) book\nMcelreath (videos)\nPENG | art of … (2017) ch 6.5 ( https://bookdown.org/rdpeng/artofdatascience/) | r4ds (2019) ch 9.5\nmosaic ch 5.6, ch 24\n\n\n\nMore advanced regession/modeling books\n\nShalizi: excellent:\n\nhttp://www.stat.cmu.edu/~cshalizi/TALR/ -deeper/more explanatory. By Ch 11, use of gradient f, matrix derviatives ….\n\nShalizi http://www.stat.cmu.edu/~cshalizi/ADAfaEPoV/ADAfaEPoV.pdf\n\nhttp://www.stat.cmu.edu/~cshalizi/mreg/15/\nDavidson (Econometric) - Ch 1, 2\nISLRv2: (book) https://web.stanford.edu/~hastie/ISLRv2_website.pdf - videos: https://www.youtube.com/c/R4DSOnlineLearningCommunity\nMATLOFF (1st book) | ch3 - lot of useful prproperties of x,y | ch 7 - affine transformations\nEfron, Hastie “Computer Age Statistical Inference” (advanced, but chapter intros put techniques into perspective), no R.\nKuhn (2019): https://bookdown.org/max/FES/\nRAFAEL dsbook - ch 17.4, ch 18.3.4\nRoback/Legler Beyond Multiple Linear Regression: (2021)_ https://bookdown.org/roback/bookdown-BeyondMLR/ (Replaces BYSH) introduces likelihood; ch6 - logistic worked problem\nSiegrist (aka random services.org) * random| (3)expected value 1..11 and |(5) random samples 1-8 (t-dist)\nTaubes, linear alg, statistics, http://people.math.harvard.edu/~knill/teaching/math19b_2011/handouts/chapters1-19.pdf Biology? math? probability? Think this is really an ideas book; not as easy as may appear.\n\n\nAlgorithms & ML\n\nBerkeley, excellent glossary: https://www.stat.berkeley.edu/~stark/SticiGui/Text/gloss.htm\nBerkeley CRASH\nChollet, Deep Learning for R (not online, no pdf)\nCompeau:\n- great ideas book! http://compeau.cbd.cmu.edu/\n- http://compeau.cbd.cmu.edu/programming-for-lovers/ cmu - ch 8, 9 esp collinear.\n\nBoehmke Hands on ML | https://bradleyboehmke.github.io/HOML/ Ch 4,5\nDeisenroth, Faiesel et al | Math4ML *book | linear alg book, regression, 2nd level\nGagolewski Lightweight ML with R \nHiggens “Practical R Info?”\nHuntington “The Effect Book”\nmcelreath: https://github.com/rmcelreath/stat_rethinking_2022 (videos)\nMolnar, “Interpretable ML”\nSciLearn\nThomas, Math for ML … good lin alg, but quickly gets advanced. https://gwthomas.github.io/docs/math4ml.pdf\nmcelreath: https://github.com/rmcelreath/stat_rethinking_2022 (videos)\nhttps://www.tmwr.org/\nUCLA: Mixed Models - intro: https://stats.oarc.ucla.edu/other/mult-pkg/introduction-to-linear-mixed-models/\nVarma: Deep Learning \n\n\n\nBayes\n\n\nBarber, David: Bayesian Reasoning & ML (examples): \nClyde, Mine et al Intro To Bayesian Thinking (R,intuitive, online only)\nDowney, Allen \nDavidson-Pilon Bayesian for Hackers python, but ideas seem well presented.\nDekking \nGimenez: Easy Stats (examples)\nKurz: Statistial Rethinking reCoded (Bayesian) (R, meant as supplement to McElreath)\nJohnson, Ott et al: \nLavine (tutorial) https://people.math.umass.edu/~lavine/whatisbayes.pdf\n\nMcElreath: book, videos Statistical Rethinking \npaulvanderlake (many R resources) 2012 ThinkBayes \nTaubes, Lectures 1-19 \n\n\n\n\n2nd Bayes books | Advanced or Interesting Ideas\n\nAaronson, Scott: Information Theory: CS, Quantum, Bayesian, linear algebra, Probability\nCunningham, Scott: Mixtape: Causal Inference \nHunington-Klein The Effect Book wordy \nGelman: DBA3 \n\n\n\n\nShiny\n-   R, javascript + shiny https://book.javascript-for-r.com/\n-   Hadley, https://mastering-shiny.org/\n-   https://engineering-shiny.org/\n-   HTTP Testing (book) https://books.ropensci.org/http-testing/\n\n\nLinear Algebra (as mathematics)\n\nBeezer Linear Algebra (easier?)\nHerve Adbi | lin alg| no R, no stat, starts simple but gets to decomposition.\nStrang, Linear Algebra (classic)\nArtin, Michael “Algebra” - readable ?\nFriendly - R Pkg linear algebra\nKazan | normal equations\n\n\n\nIntro to Linear Alg & Models,\n\nKuiper, Shonda: simple, clear: video: https://www.youtube.com/watch?v=jQkK0XMrAdM\nRace, Shaina gentle intro to lin alg:, https://shainarace.github.io/LinearAlgebra/index.html\nThomas, Garrett, Math for ML, Berkeley https://gwthomas.github.io/docs/math4ml.pdf\nBendixcarstensen.com, with R & matrix models (practical; try not use api pkg) http://www.bendixcarstensen.com/APC/linalg-notes-BxC.pdf\nRafael genomics - Chapter 4 matrix\n\n\n\nLatex (.tex, latex, not knitr, markdown, pandoc)\n\nhttps://learnbyexample.github.io/customizing-pandoc/\n\nLatex: Latex in 24 hours (iPad)\nhttps://mirrors.rit.edu/CTAN/info/beginlatex/html/intro.html#intro\nwikibooks: https://en.wikibooks.org/wiki/LaTeX/Document_Structure\nhttp://ctan.imsc.res.in/info/first-latex-doc/first-latex-doc.pdf\nhttps://texfaq.org/FAQ-man-latex\nLuaTex Manual: http://www.pragma-ade.com/general/manuals/luatex.pdf\nLuaTex Background Overleaf: https://www.overleaf.com/learn/latex/Articles/An_Introduction_to_LuaTeX_(Part_1)%3A_What_is_it%E2%80%94and_what_makes_it_so_different%3F\nFontspec pkg (for LuaTex) https://mirrors.rit.edu/CTAN/macros/unicodetex/latex/fontspec/fontspec.pdf * Video: Michelle … (very clear!)\n\nMath Mode\n\n*  AMS math  documentation\n     \\href{https://www.latex-project.org/help/documentation/amsldoc.pdf}{2017\n     version on ipad}\n*  https://www1.cmc.edu/pages/faculty/aaksoy/latex/latexthree.html#\n*  http://web.mit.edu/rsi/www/pdfs/math.pdf\n*  https://www.atqed.com/latex-column-vector\n\n\n\nGood Technical Reading\n\nLinux: Archiwiki, Debian, FreeBSD\nGross, Ash et al “Elliptical Tales” - very readable, but must think! (515.983 | ASH | 2012) * Linux- insides: https://0xax.gitbooks.io/linux-insides/content/\nSeefeld, et al Biology & R | https://cran.r-project.org/doc/contrib/Seefeld_StatsRBio.pdf\nRobert Sedgewick and Kevin Wayne (essential info … serious programmers) https://algs4.cs.princeton.edu/home/\n\n\nZSH\n\nJanssens, DS at Command Line: https://www.datascienceatthecommandline.com/2e/\nGreat way to improve zsh, CLI skills. * Rothgar Mastering ZSH: https://github.com/rothgar/mastering-zsh\n\n\n\nREGEX\nFocus: grep -P, regex usage:\n\n\nhttps://linuxize.com/post/regular-expressions-in-grep/#grep-regular-expression (overview, not bad place to start)\n\nanother overview: https://bsd.org/regexintro.html\n!wikipidia - several excellent articles and background.\nGNU grep documentation: https://www.gnu.org/savannah-checkouts/gnu/grep/manual/grep.html#Top\nwikipedia articles!\nBecause touch upon many issues: quoting, expansions, quasi-quotation, recursion, definitions which I have stumbled accross but never really understood at appropriate abstraction. Now it may clarify why do what we do and why the nomenclature is the way it is.\n!so regex FAQ: https://stackoverflow.com/tags/regex/info (specific question (else can get lost in all the permutations.)\n\nToo comprehensive? (docs that cover flavors, usage in languages are too confusing to me)\n\n(Regex | Jan Goyvaerts) https://www.regular-expressions.info/tutorial.html (regex buddy)\nhttps://www.regular-experssions.mobi\n\n(iPad) Mastering Regular Expressions\n\nFinite Automata?\n\nhttps://sodocumentation.net/regex\nhttps://swtch.com/~rsc/regexp/regexp1.html\n\n\n\n\nVideos\n\nmaththebeautiful - Paul?\nStatquest - Josh Starmer\nBright Side of Math\n3Blue1Brown\nZedstatistics\nChris Mack - practical R, models\nStatistics Globe * Edward Malthouse - is careful with assumptions. * Prof Christoph Scherber -03 * Lorenzo * Sadum * Tom Raby * Jazon Jiao (Alg + Regression)\n\n\n\nDT Joins (merge)\n\nhttps://rdatatable.gitlab.io/data.table/index.html\nhttps://stackoverflow.com/questions/1299871/how-to-join-merge-data-frames-inner-outer-left-right?noredirect=1&lq=1 - https://jozef.io/r006-merge/ - \n\n\n\n\nAPIs and R\n\nLonger Reading/Documentation\n\nGargle docs include discussion of a few Google Cloud features\nMozilla MDN\nRequest body\nhttps://oauth.com (Aaron Parecki)\nweb technologies, including RESTFUL, https://www.se.rit.edu/~swen-344/expectations/\nRFC Specs\nJSON - https://json-schema.org/\n\n\n\n\nVideos\n\n\nGriffith Curl to make resquests. ggmaps Google Maps API https://www.youtube.com/watch?v=Of_M4kcE9yM&list=PLbcglKxZP5PN07Vw-0ukcDJCxFGY2Crgc\nfreeCodeCamp Postman Intro.\n[Oauth 2.0 - Explain like I am 5] (https://www.youtube.com/watch?v=hHRFjbGTEOk)\n Basic Authentication: urlencode, user:pass, how browser responds, TLS\nCurl’s Creator https://youtu.be/I6id1Y0YuNk?list=PLbcglKxZP5PN07Vw-0ukcDJCxFGY2Crgc\nPostman and GitHub: https://youtu.be/AfuL7AFpFmQ?list=PLbcglKxZP5PN07Vw-0ukcDJCxFGY2Crgc\nPlumber::,R, api https://www.youtube.com/watch?v=J0Th2QRZ7Rk * R4DS all videos: https://www.youtube.com/c/R4DSOnlineLearningCommunity\n\nCRAN Task Views: Web Technology & Services: https://cran.r-project.org/web/views/WebTechnologies.html * (R & Dropbox) https://github.com/karthik/rdrop2 (2020) * (R & Predictit) https://github.com/kiernann/predictr\n\n\nRESTFUL APIS (see 0300_tech_notes.md)\n\n\n\nNEOVIM/LUA\n\nConfig\n\nhttps://neovim.io/doc/user/quickref.html#option-list\nCode Ex: | Joel | goal: understand ! |https://github.com/whatsthatsmell/dots/tree/master/public%20dots/vim-nvim\n\nhttps://cj.rs/blog/my-setup/nvim-0-5/ | go to playlists | view all playlists | choose by length, date etc.\nStatusline: https://elianiva.my.id/post/neovim-lua-statusline#active-statusline\nhttps://www.jakewiesler.com/blog/getting-started-with-vim | Jake | good but limited.\nblog + https://vonheikemen.github.io/devlog/tools/configuring-neovim-using-lua/\nblog + https://blog.devgenius.io/create-custom-keymaps-in-neovim-with-lua-d1167de0f2c2\nEx: https://gitlab.com/mcepl/vimdir/-/tree/master/plugin\n\nEx: https://github.com/samuelludwig/nixrc/tree/master/modules/user/nvim/lua/dot\n300 line challenge: https://neovim.discourse.group/t/the-300-line-init-lua-challenge/227\nhttps://benfrain.com/refactor-your-neovim-init-lua-single-file-to-modules-with-packer/\nhttps://github.com/nanotee/nvim-lua-guide\nkickstart: https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua\n\n\n\nLua\n\n\n\nPlugins\n\n\n\nAndroid\n\n\\href{https://www.androidauthority.com/lineageos-install-guide-893303/{decent primer:android RoM”"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nComing soon …\n\n\n\n\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nExample of callout.\nnote, tip, warning, caution, and important.\n\n\n\n\n\n\nflowchart BT \n    .globalenv --&gt; env1 --&gt;env2 --&gt; ... \n    \n\n\n\n\n\n\nThis content can be styled with a border\n\n\n\nA 9px font.\n\n\n\nA 18px font.\n\n\n\n\n\n%% This is a comment.\nstateDiagram-v2\n    [*] --&gt; Top\n    Top --&gt; env2\n    env2 --&gt; env1\n    env1 --&gt; .globalenv\n    .globalenv --&gt; [*]\n    \n   %% env1 --&gt; env2\n    %%.globalenv --&gt; env1"
  },
  {
    "objectID": "410_bquote_example.html",
    "href": "410_bquote_example.html",
    "title": "410_bquote",
    "section": "",
    "text": "bquote(hello)                             ##  hello\n..........&gt; hello\nbquote(\"hello\")                           ##  \"hello\"\n..........&gt; [1] \"hello\"\n\n## even when x is undefined\nrm(x)\n..........&gt; Warning in rm(x): object 'x' not found\nbquote(x)                   ## x\n..........&gt; x\n\n\nx = 1\ny = 2\nz = 3\n(xyz &lt;- bquote(x + y + z))                ##    (x + y + z)\n..........&gt; x + y + z"
  },
  {
    "objectID": "410_bquote_example.html#like-quote-bquote-can-quote-its-argument",
    "href": "410_bquote_example.html#like-quote-bquote-can-quote-its-argument",
    "title": "410_bquote",
    "section": "",
    "text": "bquote(hello)                             ##  hello\n..........&gt; hello\nbquote(\"hello\")                           ##  \"hello\"\n..........&gt; [1] \"hello\"\n\n## even when x is undefined\nrm(x)\n..........&gt; Warning in rm(x): object 'x' not found\nbquote(x)                   ## x\n..........&gt; x\n\n\nx = 1\ny = 2\nz = 3\n(xyz &lt;- bquote(x + y + z))                ##    (x + y + z)\n..........&gt; x + y + z"
  },
  {
    "objectID": "410_bquote_example.html#like-quote-bquote-can-return-character-call-expression",
    "href": "410_bquote_example.html#like-quote-bquote-can-return-character-call-expression",
    "title": "410_bquote",
    "section": "Like quote, bquote can return character, call, expression",
    "text": "Like quote, bquote can return character, call, expression\n\nxyz\n..........&gt; x + y + z\nis.expression(xyz)\n..........&gt; [1] FALSE\nis.character(xyz)\n..........&gt; [1] FALSE\ntypeof(xyz)\n..........&gt; [1] \"language\"\nis.call(xyz)            ## TRUE\n..........&gt; [1] TRUE\neval(xyz)               ## 6\n..........&gt; [1] 6\n\n\n(res = (bquote(hello)))\n..........&gt; hello\nis.call(res)\n..........&gt; [1] FALSE\nis.character(res)\n..........&gt; [1] FALSE\nis.expression(res)\n..........&gt; [1] FALSE\nis.symbol(res)          ## TRUE\n..........&gt; [1] TRUE\n\neval(res)               ## Error, b/c no object \n..........&gt; Error in eval(res): object 'hello' not found\n\n\n\n(res = (bquote(\"hello\")))\n..........&gt; [1] \"hello\"\nis.call(res)\n..........&gt; [1] FALSE\nis.character(res)       ## TRUE\n..........&gt; [1] TRUE\nis.expression(res)\n..........&gt; [1] FALSE\nis.symbol(res)          ## \n..........&gt; [1] FALSE\n\neval(res)               ## \"hello\"\n..........&gt; [1] \"hello\"\n\n(res = bquote(~x+y))    ## ~x+y\n..........&gt; ~x + y\nis.call(res)            ## TRUE \n..........&gt; [1] TRUE\npurrr::is_formula(res)\n..........&gt; [1] TRUE"
  },
  {
    "objectID": "410_bquote_example.html#bquote-also-allows-parts-to-be-quote-and-parts-to-be-evaluated-and-substituted-immediately",
    "href": "410_bquote_example.html#bquote-also-allows-parts-to-be-quote-and-parts-to-be-evaluated-and-substituted-immediately",
    "title": "410_bquote",
    "section": "bquote also allows parts to be quote and parts to be evaluated and substituted immediately",
    "text": "bquote also allows parts to be quote and parts to be evaluated and substituted immediately\n\nx = 1\n\nquote(1 + .(x))   # 1 + .(x) \n..........&gt; 1 + .(x)\n(res=bquote(1 + .(x)))  # 1 + 1\n..........&gt; 1 + 1\nis.call(res)\n..........&gt; [1] TRUE\nis.expression(res)\n..........&gt; [1] FALSE\n\n\n(res=bquote(template + .(x)))\n..........&gt; template + 1\nis.call(res)\n..........&gt; [1] TRUE\nis.expression(res)\n..........&gt; [1] FALSE\n\n(res=bquote(sin(.(x)))) # sin(1)\n..........&gt; sin(1)\n(res=bquote(sin(.(x+1)))) # sin(1)\n..........&gt; sin(2)\nis.call(res)\n..........&gt; [1] TRUE\nis.expression(res)\n..........&gt; [1] FALSE\n\n(res=bquote(sin(.(x+1)), splice=TRUE)) # sin(1)\n..........&gt; sin(2)"
  },
  {
    "objectID": "410_bquote_example.html#splice-in-r-4.0.0-multiple-expresssions",
    "href": "410_bquote_example.html#splice-in-r-4.0.0-multiple-expresssions",
    "title": "410_bquote",
    "section": "SPLICE in R 4.0.0 (multiple expresssions)",
    "text": "SPLICE in R 4.0.0 (multiple expresssions)\nhttps://stackoverflow.com/a/60689381/5057251 https://stackoverflow.com/q/72039909/5057251 (multiple ways)"
  },
  {
    "objectID": "410_bquote_example.html#compare-quote-and-bquote",
    "href": "410_bquote_example.html#compare-quote-and-bquote",
    "title": "410_bquote",
    "section": "compare quote and bquote",
    "text": "compare quote and bquote\n\n\n# bquote - step by step ,   .() operator\nbquote(1+2)       # 1 + 2\n..........&gt; 1 + 2\n\ntwo = 2\nbquote(1 + two)   # 1 + two\n..........&gt; 1 + two\nbquote(hello)\n..........&gt; hello\nbquote(1 + .(two))   # 1 + 2   (substitution, not eval)\n..........&gt; 1 + 2\n\neval(bquote(1 + two)) # 3 \n..........&gt; [1] 3\neval(bquote(1 + .(two)))   # 3 \n..........&gt; [1] 3\n\n###—————————–"
  },
  {
    "objectID": "410_bquote_example.html#stole-from-httpsgithub.comklmrbox",
    "href": "410_bquote_example.html#stole-from-httpsgithub.comklmrbox",
    "title": "410_bquote",
    "section": "(stole from https://github.com/klmr/box)",
    "text": "(stole from https://github.com/klmr/box)\nsubject=“bquote” mod_name=“base” bquote(help(topic = .(subject), package = .(mod_name))) eval( bquote(help(topic = .(subject), package = .(mod_name))))\nsubject=“quote” eval( bquote(help(topic = .(subject), package = .(mod_name)))) ##\nd = 2 bquote(a+b+c + .(d)) ## a + b + c + 2"
  },
  {
    "objectID": "410_bquote_example.html#section",
    "href": "410_bquote_example.html#section",
    "title": "410_bquote",
    "section": "",
    "text": "theta = pi/4 bquote(sin(1 + .(theta))) ## sin(1 + 0.7853…) eval(bquote(sin(1 + .(theta)))) ## 0.977"
  },
  {
    "objectID": "410_bquote_example.html#section-1",
    "href": "410_bquote_example.html#section-1",
    "title": "410_bquote",
    "section": "",
    "text": "z= bquote(sin(1 + .(theta))) ## sin(1 + 0.7853…) typeof(z) ## “language” is.call(z) ## T eval(z) ## 0.977\n\n::: {.cell hash='410_bquote_example_cache/html/unnamed-chunk-6_bfc5dd3dd7e360f94032c16c06e1ea63'}\n\n```{.r .cell-code}\nx = 5 \nbquote(x == .(x))\n..........&gt; x == 5\nbquote(.(x))\n..........&gt; [1] 5\n\n## from ethz documentation, takes expr, returns lang ob\ndefault &lt;- 1\n(z = bquote( function(x, y = .(default)) x+y ))\n..........&gt; function(x, y = 1) x + y\n\ntypeof(z)\n..........&gt; [1] \"language\"\nis.call(z)  #T\n..........&gt; [1] TRUE\nis.expression(z) #F \n..........&gt; [1] FALSE\nis.symbol(z) #F\n..........&gt; [1] FALSE\na = 2\nplot(1:10, a*(1:10), main = bquote(a == .(a)))\n\n\n\n\n\n(angle  = 1:10)\n..........&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n(variable = as.name(\"angle\"))             ## variable is now a symbol\n..........&gt; angle\n\nis.character(variable)  # FALSE\n..........&gt; [1] FALSE\n\nis.name(variable)   # TRUE\n..........&gt; [1] TRUE\nis.symbol(variable) # TRUE\n..........&gt; [1] TRUE\ntypeof(variable)    # TRUE\n..........&gt; [1] \"symbol\"\n\n##\nexpr = quote(x+y)\nis.expression(expr) # FALSE\n..........&gt; [1] FALSE\nis.call(expr)      # TRUE\n..........&gt; [1] TRUE\nstr(expr)\n..........&gt;  language x + y\n\n#-----------------------------\n##  quasiquotation:  insert .... into an expr template; return expression\npdf()\n\n\nplot(x = 1:10, y=91:100)\n\nbquote(x= .(variable))\n..........&gt; Error in bquote(x = .(variable)): unused argument (x = .(variable))\nbquote(\n  plot(x = .(variable), \n       y = sin(.(variable)))\n  )\n..........&gt; plot(x = angle, y = sin(angle))\n\ndev.off()\n..........&gt; png \n..........&gt;   2\n:::\n\n## A variable to pass in\ncor &lt;- -.321\ncor2 &lt;- '-.321'\n\npar(mfrow = c(1, 2))\nplot(1:10, 1:10, main = bquote(\"Hello\" ~ r[xy] == .(cor) ~ \"and\" ~ B^2))\nplot(1:10, 1:10, main = bquote(\"Hello\" ~ r[xy] == .(cor2) ~ \"and\" ~ B^2))\n\n\n\n\n\nbquote(\"Hello\")\n..........&gt; [1] \"Hello\"\nbquote(\"Hello\" ~ 3)\n..........&gt; \"Hello\" ~ 3\nbquote(\"Hello\" ~ r[xy])\n..........&gt; \"Hello\" ~ r[xy]\nx = 2\nbquote(\"hello\" ~ .(x))\n..........&gt; \"hello\" ~ 2\nbquote(\"x\" ~ .(x))\n..........&gt; \"x\" ~ 2\nbquote(\"The answer \"  ~.(x))\n..........&gt; \"The answer \" ~ 2\nbquote(x == .(x))\n..........&gt; x == 2\nif (F) bquote(x = .(x))\n\n# want 1 + 2\ny = 1\nx=2\nbquote( function(x, y = .(y)) x+y )\n..........&gt; function(x, y = 1) x + y\neval(bquote( function(x, y = .(y)) x+y ))\n..........&gt; function(x, y = .(y)) x+y\neval(eval(bquote( function(x, y = .(y)) x+y )))\n..........&gt; function(x, y = .(y)) x+y"
  },
  {
    "objectID": "020_CSS_play.html",
    "href": "020_CSS_play.html",
    "title": "Untitled",
    "section": "",
    "text": "This is a CSS play page. SEE css_examples.css for info\n\nIs this centered? yep\n\n\nA container? one item\n\n\nGiant (h1)\n\nbullet point (li)"
  },
  {
    "objectID": "400_rlang_proposal.html",
    "href": "400_rlang_proposal.html",
    "title": "quarto-experiments",
    "section": "",
    "text": "I’ve tried a few times to work through metaprogramming in R and each time became discouraged when I reach a concept that does not appear difficult but example code in R leaves me puzzled.\n(Example: Why isn’t x a symbol. When does quote() return a string and when not?)\nOthers may not have this problem or simply accept it and move on.\n\n\n\nBreak down some of the ideas (ex: data masking) into clearer definitions. Separate the idea from R code. Use terminology with examples (and counter-examples) that illustrate an idea. The guide will be a list of terms, definitions , example code and then links.\nExample: Code block in this Wikipedia article, beginning with ‘apples=4’, shows what string interpolation is and what is not string interpolation.\nBefore introducing the rlang solution, show why base R is not sufficient. Add simple graphs to illustrate ideas.\nNot write a book or reinvent anything. Link to R manuals, rlang documentation, stackoverflow, articles written by others. However, this guide should have very simple code to clarify the idea or problem.\n\n\n\nI do not know Lisp, but it appears R implements a number of ideas from Lisp. Sometimes I benefit from reading wikipedia and then try to figure out the what the R code is doing under the hood.\n\n\n\nDoubt I will finish it. Because I’ll get stuck and refuse to move on. (not the best career trait) If there is another person in our group able and willing to puzzle out some of these things, it could work out nicely. In any event, I am sure that even a list of terms, with few introductory links, will give the next group something to pick up."
  },
  {
    "objectID": "400_rlang_proposal.html#proposal-develop-a-short-guide-to-concepts-examples-definitions-used-by-rlang",
    "href": "400_rlang_proposal.html#proposal-develop-a-short-guide-to-concepts-examples-definitions-used-by-rlang",
    "title": "quarto-experiments",
    "section": "",
    "text": "I’ve tried a few times to work through metaprogramming in R and each time became discouraged when I reach a concept that does not appear difficult but example code in R leaves me puzzled.\n(Example: Why isn’t x a symbol. When does quote() return a string and when not?)\nOthers may not have this problem or simply accept it and move on.\n\n\n\nBreak down some of the ideas (ex: data masking) into clearer definitions. Separate the idea from R code. Use terminology with examples (and counter-examples) that illustrate an idea. The guide will be a list of terms, definitions , example code and then links.\nExample: Code block in this Wikipedia article, beginning with ‘apples=4’, shows what string interpolation is and what is not string interpolation.\nBefore introducing the rlang solution, show why base R is not sufficient. Add simple graphs to illustrate ideas.\nNot write a book or reinvent anything. Link to R manuals, rlang documentation, stackoverflow, articles written by others. However, this guide should have very simple code to clarify the idea or problem.\n\n\n\nI do not know Lisp, but it appears R implements a number of ideas from Lisp. Sometimes I benefit from reading wikipedia and then try to figure out the what the R code is doing under the hood.\n\n\n\nDoubt I will finish it. Because I’ll get stuck and refuse to move on. (not the best career trait) If there is another person in our group able and willing to puzzle out some of these things, it could work out nicely. In any event, I am sure that even a list of terms, with few introductory links, will give the next group something to pick up."
  },
  {
    "objectID": "030_quarto_katex_html_references.html",
    "href": "030_quarto_katex_html_references.html",
    "title": "030_quarto_katex_html_references.qmd",
    "section": "",
    "text": "(this is fenced)\n\n\n\n\n\n\nNote\n\n\n\nThis is a play file. Note that there are five types of callouts, including: note, warning, important, tip, and caution.\n\n\n\n\nKatex References (html)\n\nKatex\ndisplay link only as url: https://katex.org/docs/supported.html\nHTML with quarto (CSS, ) https://quarto.org/docs/output-formats/html-basics.html\nEquations, Tex macros https://quarto.org/docs/authoring/markdown-basics.html#equations\nhttps://quarto.org/docs/guide/\nhttps://quarto.org/docs/publishing/github-pages.html\n\n\n1 + 1\n..........&gt; [1] 2\n\nYou can add options to executable code like this\n\n..........&gt; [1] 4\n\n\n\n\nTest Latex\nThis is inline latex \\theta; using katex to render in html!"
  }
]